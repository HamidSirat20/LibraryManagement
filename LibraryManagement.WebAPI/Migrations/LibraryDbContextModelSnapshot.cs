// <auto-generated />
using System;
using LibraryManagement.WebAPI.Data;
using LibraryManagement.WebAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LibraryManagement.WebAPI.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    partial class LibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "fine_status", new[] { "paid", "pending", "waived" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "genre", new[] { "biography", "fantasy", "fiction", "history", "horror", "mystery", "non_fiction", "other", "romance", "science_fiction", "thriller" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "loan_status", new[] { "active", "lost", "overdue", "pending", "renewed", "returned" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "fine_status", new[] { "pending", "paid", "waived" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "genre", new[] { "fiction", "non_fiction", "mystery", "science_fiction", "fantasy", "biography", "history", "romance", "thriller", "horror", "other" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "loan_status", new[] { "active", "returned", "overdue", "renewed", "lost", "pending" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "user_role", new[] { "user", "admin" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_role", new[] { "admin", "user" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LibraryManagement.WebAPI.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("bio");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_authors");

                    b.ToTable("authors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Bio = "Author of many great books.",
                            CreatedAt = new DateTime(2025, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "charlie.writer@example.com",
                            FirstName = "Charlie",
                            LastName = "Writer",
                            UpdatedAt = new DateTime(2025, 10, 3, 9, 18, 41, 744, DateTimeKind.Utc).AddTicks(9229)
                        });
                });

            modelBuilder.Entity("LibraryManagement.WebAPI.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CoverImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cover_image_url");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<Genre>("Genre")
                        .HasColumnType("genre")
                        .HasColumnName("genre");

                    b.Property<int>("Pages")
                        .HasColumnType("integer")
                        .HasColumnName("pages");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("published_date");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uuid")
                        .HasColumnName("publisher_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_books");

                    b.HasIndex("PublisherId")
                        .HasDatabaseName("ix_books_publisher_id");

                    b.ToTable("books", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CoverImageUrl = "https://example.com/book-cover.png",
                            CreatedAt = new DateTime(2025, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A beginner’s guide to Entity Framework Core with PostgreSQL.",
                            Genre = Genre.NonFiction,
                            Pages = 350,
                            PublishedDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Title = "Learning EF Core",
                            UpdatedAt = new DateTime(2025, 10, 3, 9, 18, 41, 745, DateTimeKind.Utc).AddTicks(164)
                        });
                });

            modelBuilder.Entity("LibraryManagement.WebAPI.Models.BookAuthor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_book_authors");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_book_authors_author_id");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_book_authors_book_id");

                    b.ToTable("book_authors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            AuthorId = new Guid("44444444-4444-4444-4444-444444444444"),
                            BookId = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2025, 10, 3, 9, 18, 41, 745, DateTimeKind.Utc).AddTicks(1108)
                        });
                });

            modelBuilder.Entity("LibraryManagement.WebAPI.Models.LateReturnOrLostFee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("issued_date");

                    b.Property<Guid>("LoanId")
                        .HasColumnType("uuid")
                        .HasColumnName("loan_id");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("paid_date");

                    b.Property<FineStatus>("Status")
                        .HasColumnType("fine_status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_late_return_or_lost_fees");

                    b.HasIndex("LoanId")
                        .HasDatabaseName("ix_late_return_or_lost_fees_loan_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_late_return_or_lost_fees_user_id");

                    b.ToTable("late_return_or_lost_fees", (string)null);
                });

            modelBuilder.Entity("LibraryManagement.WebAPI.Models.Loan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("due_date");

                    b.Property<decimal?>("LateFee")
                        .HasColumnType("numeric")
                        .HasColumnName("late_fee");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("loan_date");

                    b.Property<LoanStatus>("LoanStatus")
                        .HasColumnType("loan_status")
                        .HasColumnName("loan_status");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("return_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_loans");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_loans_book_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_loans_user_id");

                    b.ToTable("loans", (string)null);
                });

            modelBuilder.Entity("LibraryManagement.WebAPI.Models.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("website");

                    b.HasKey("Id")
                        .HasName("pk_publishers");

                    b.ToTable("publishers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Address = "789 Publisher Ave, Booktown",
                            CreatedAt = new DateTime(2025, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Tech Books Publishing",
                            UpdatedAt = new DateTime(2025, 10, 3, 9, 18, 41, 744, DateTimeKind.Utc).AddTicks(8426),
                            Website = "https://techbooks.example.com"
                        });
                });

            modelBuilder.Entity("LibraryManagement.WebAPI.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("reservation_date");

                    b.Property<LoanStatus>("Status")
                        .HasColumnType("loan_status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_reservations");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_reservations_book_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reservations_user_id");

                    b.ToTable("reservations", (string)null);
                });

            modelBuilder.Entity("LibraryManagement.WebAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("MembershipEndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("membership_end_date");

                    b.Property<DateTime>("MembershipStartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("membership_start_date");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<UserRole>("Role")
                        .HasColumnType("user_role")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("53128e37-a935-4080-b18f-7daa9cbf2c7c"),
                            Address = "123 Admin St, Cityville",
                            AvatarUrl = "https://www.gravatar.com/avatar/admin",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "alice.admin@example.com",
                            FirstName = "Alice",
                            LastName = "Admin",
                            MembershipEndDate = new DateTime(2026, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MembershipStartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Password = "hashedpassword",
                            Phone = "+1-555-1234",
                            Role = UserRole.Admin,
                            UpdatedAt = new DateTime(2025, 10, 3, 9, 18, 41, 744, DateTimeKind.Utc).AddTicks(3468)
                        },
                        new
                        {
                            Id = new Guid("fc570d3d-5c68-46b3-89b1-63036519a128"),
                            Address = "456 Reader Ln, Townsville",
                            AvatarUrl = "https://www.gravatar.com/avatar/user",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "bob.reader@example.com",
                            FirstName = "Bob",
                            LastName = "Reader",
                            MembershipEndDate = new DateTime(2026, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MembershipStartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Password = "hashedpassword",
                            Phone = "+1-555-5678",
                            Role = UserRole.User,
                            UpdatedAt = new DateTime(2025, 10, 3, 9, 18, 41, 744, DateTimeKind.Utc).AddTicks(4668)
                        });
                });

            modelBuilder.Entity("LibraryManagement.WebAPI.Models.Book", b =>
                {
                    b.HasOne("LibraryManagement.WebAPI.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_books_publishers_publisher_id");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("LibraryManagement.WebAPI.Models.BookAuthor", b =>
                {
                    b.HasOne("LibraryManagement.WebAPI.Models.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_authors_authors_author_id");

                    b.HasOne("LibraryManagement.WebAPI.Models.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_authors_books_book_id");

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryManagement.WebAPI.Models.LateReturnOrLostFee", b =>
                {
                    b.HasOne("LibraryManagement.WebAPI.Models.Loan", "Loan")
                        .WithMany("LateReturnOrLostFees")
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_late_return_or_lost_fees_loans_loan_id");

                    b.HasOne("LibraryManagement.WebAPI.Models.User", "User")
                        .WithMany("LateReturnOrLostFees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_late_return_or_lost_fees_users_user_id");

                    b.Navigation("Loan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryManagement.WebAPI.Models.Loan", b =>
                {
                    b.HasOne("LibraryManagement.WebAPI.Models.Book", "Book")
                        .WithMany("Loans")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loans_books_book_id");

                    b.HasOne("LibraryManagement.WebAPI.Models.User", "User")
                        .WithMany("Loans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loans_users_user_id");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryManagement.WebAPI.Models.Reservation", b =>
                {
                    b.HasOne("LibraryManagement.WebAPI.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reservations_books_book_id");

                    b.HasOne("LibraryManagement.WebAPI.Models.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reservations_users_user_id");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryManagement.WebAPI.Models.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("LibraryManagement.WebAPI.Models.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("Loans");
                });

            modelBuilder.Entity("LibraryManagement.WebAPI.Models.Loan", b =>
                {
                    b.Navigation("LateReturnOrLostFees");
                });

            modelBuilder.Entity("LibraryManagement.WebAPI.Models.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryManagement.WebAPI.Models.User", b =>
                {
                    b.Navigation("LateReturnOrLostFees");

                    b.Navigation("Loans");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
